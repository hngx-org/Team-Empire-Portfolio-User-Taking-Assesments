
# Generated by CodiumAI
from statistics import StatisticsError

from pstats import StatsProfile

from pstats import Stats

from unittest.mock import MagicMock

from pytest import MonkeyPatch
import requests

from fastapi import HTTPException, status

from app.services.external import authenticate_user


import pytest

class TestAuthenticateUser:

    # Authenticates user with valid token and permissions
    def test_valid_token_and_permissions(self):
        # Arrange
        token = "l3h5.34jb3,4mh346gv,34h63vk3j4h5k43hjg54kjhkg4j6h45g6kjh45gk6jh6k6g34hj6"

        # Act
        result = authenticate_user(token)

        # Assert
        assert result.user_id == "2mn3m4n23mb34n23b4234234nbm234"
        assert result.is_super_admin == False
        assert result.permissions == ['assessments::view', 'assessment::take', 'results::view']


    # Authenticates user with valid token and no permissions
    def test_valid_token_and_no_permissions(self):
        # Arrange
        token = "l3h5.34jb3,4mh346gv,34h63vk3j4h5k43hjg54kjhkg4j6h45g6kjh45gk6jh6k6g34hj6"

        # Act
        result = authenticate_user(token)

        # Assert
        assert result.user_id == "2mn3m4n23mb34n23b4234234nbm234"
        assert result.is_super_admin == False
        assert result.permissions == []

    # Raises HTTPException if authentication service returns a status code other than 200
    def test_raises_http_exception(self):
        # Arrange
        token = "invalid_token"

        # Act and Assert
        with pytest.raises(HTTPException):
            authenticate_user(token)


    # Raises HTTPException if user has no permissions
    def test_raises_httpexception_if_user_has_no_permissions(self):
        # Arrange
        token = "l3h5.34jb3,4mh346gv,34h63vk3j4h5k43hjg54kjhkg4j6h45g6kjh45gk6jh6k6g34hj6"
        request_mock = MagicMock()
        request_mock.status_code = status.HTTP_200_OK
        request_mock.json.return_value = {
            "user_id": "2mn3m4n23mb34n23b4234234nbm234",
            "is_super_admin": False,
            "permissions": {"assessment": []}
        }
        get_mock = MagicMock(return_value=request_mock)
        MonkeyPatch.setattr(requests, "get", get_mock)

        # Act and Assert
        with pytest.raises(HTTPException) as e:
            authenticate_user(token)
    
        assert e.value.status_code == status.HTTP_403_FORBIDDEN
        assert e.value.detail == "Forbidden"


    # Authenticates user with valid token and permissions
    def test_valid_token_and_permissions(self):
        # Arrange
        token = "l3h5.34jb3,4mh346gv,34h63vk3j4h5k43hjg54kjhkg4j6h45g6kjh45gk6jh6k6g34hj6"

        # Act
        result = authenticate_user(token)

        # Assert
        assert result.user_id == "2mn3m4n23mb34n23b4234234nbm234"
        assert result.is_super_admin == False
        assert result.permissions == ['assessments::view', 'assessment::take', 'results::view']


    # Raises HTTPException if authentication service returns a status code other than 200
    def test_raises_http_exception_if_authentication_service_returns_status_code_other_than_200(self):
        # Arrange
        token = "invalid_token"
        request_mock = MagicMock()
        request_mock.status_code = status.HTTP_401_UNAUTHORIZED
        get_mock = MagicMock(return_value=request_mock)
        MonkeyPatch.setattr(requests, "get", get_mock)

        # Act and Assert
        with pytest.raises(HTTPException) as e:
            authenticate_user(token)

        assert e.value.status_code == status.HTTP_401_UNAUTHORIZED
        assert e.value.detail == "Unauthorized"


    # Raises HTTPException if user has no permissions
    def test_raises_httpexception_if_user_has_no_permissions(self):
        # Arrange
        token = "l3h5.34jb3,4mh346gv,34h63vk3j4h5k43hjg54kjhkg4j6h45g6kjh45gk6jh6k6g34hj6"
        request_mock = MagicMock()
        request_mock.status_code = status.HTTP_200_OK
        request_mock.json.return_value = {
            "user_id": "2mn3m4n23mb34n23b4234234nbm234",
            "is_super_admin": False,
            "permissions": {"assessment": []}
        }
        get_mock = MagicMock(return_value=request_mock)
        MonkeyPatch.setattr(requests, "get", get_mock)

        # Act and Assert
        with pytest.raises(HTTPException) as e:
            authenticate_user(token)

        assert e.value.status_code == status.HTTP_403_FORBIDDEN
        assert e.value.detail == "Forbidden"

